"""Игра угадай число
Компьютер сам загадывает и сам угадывает число
"""

import numpy as np

def game_core_v3(number: int = 1) -> int:
    """
      Воспользуемся методом бинарного поиска для угадывания числа быстрее чем за 20 попыток.
       Функция принимает загаданное число и возвращает число попыток
    Args:
        number (int, optional): Загаданное число. Defaults to 1.

    Returns:
        int: Число попыток
    """
    # Ваш код начинается здесь
    
    count = 0   # количество попыток
    diapason = 100    # Диапозон поиска
    midle = diapason // 2   # Середина поиска
    low = 0    # нижнее значение поиска
    high = diapason    # верхнее значение поиска
    
    # Повторяем поиск, пока среднее значение диапазона не будет равно загаданному числу
    while midle != number:
      # Считаем к-во попыток
      count += 1
      # Если среднее значение меньше искомого числа, то принимаем за диапазон поиска верхнюю половину диапазона
      # в противном случае, нижнюю
      if number > midle:
        low = midle + 1
      else:
        high = midle - 1
      midle = (low + high) // 2

    # Ваш код заканчивается здесь
    return count

def score_game(game_core_v3) -> int:
    """За какое количство попыток в среднем за 1000 подходов угадывает наш алгоритм

    Args:
        game_core_v3 ([type]): функция угадывания

    Returns:
        int: среднее количество попыток
    """
    count_ls = []
    #np.random.seed(1)  # фиксируем сид для воспроизводимости
    random_array = np.random.randint(1, 101, size=(1000))  # загадали список чисел

    for number in random_array:
        count_ls.append(game_core_v3(number))

    score = int(np.mean(count_ls))
    print(f"Ваш алгоритм угадывает число в среднем за:{score} попыток")
    return score


if __name__ == "__main__":
    # RUN
    score_game(game_core_v3)